{"version":3,"sources":["components/chatbot/CustomChatbot.js","App.js","serviceWorker.js","index.js"],"names":["CustomChatbot","props","theme","background","fontFamily","headerBgColor","headerFontColor","headerFontSize","botBubbleColor","botFontColor","userBubbleColor","userFontColor","steps","id","message","trigger","user","options","value","label","end","width","height","floating","Todo","todo","index","completeTodo","removeTodo","className","style","textDecoration","isCompleted","text","onClick","TodoForm","addTodo","useState","setValue","onSubmit","e","preventDefault","type","onChange","target","App","todos","setTodos","newTodos","splice","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.77803bf9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ChatBot from \"react-simple-chatbot\";\r\nimport { ThemeProvider } from \"styled-components\";\r\n\r\nfunction CustomChatbot(props) {\r\n   const config = {\r\n     width: \"400px\",\r\n     height: \"400px\",\r\n     floating: true\r\n   };\r\n\r\n   const otherFontTheme = {\r\n  background: '#f5f8fb',\r\n  fontFamily:'Open Sans',\r\n  headerBgColor: '#6e48aa',\r\n  headerFontColor: '#fff',\r\n  headerFontSize: '16px',\r\n  botBubbleColor: '#6E48AA',\r\n  botFontColor: '#fff',\r\n  userBubbleColor: '#fff',\r\n  userFontColor: '#4a4a4a'\r\n};\r\n\r\n   const steps = [\r\n      {\r\n       id: \"Greet\",\r\n       message: \"Hello, I am your hobot!üôÇ\",\r\n       trigger: \"Ask Name\"\r\n      },\r\n      {\r\n       id: \"Ask Name\",\r\n       message: \"May I know your name, please?\",\r\n       trigger: \"Waiting user input for name\"\r\n      },\r\n      {\r\n          id: \"Waiting user input for name\",\r\n          user: true,\r\n          trigger:\"Asking options to help\"\r\n      },\r\n      {\r\n          id:\"Asking options to help\",\r\n          message: \"Hi {previousValue}, Please click on what you want me to do!\",\r\n          trigger: \"Displaying options\"\r\n      },\r\n      {\r\n          id:\"Displaying options\",\r\n          options:[\r\n              {\r\n                  value: \"Events\",\r\n                  label: \"Events‚ú®\",\r\n                  trigger: \"Events-options\"\r\n              },\r\n              {\r\n                  value: \"Food Menu\",\r\n                  label: \"Food Menu üçΩ\",\r\n                  trigger: \"Food items\"\r\n              },\r\n              {\r\n                  value:\"Hostel probs\",\r\n                  label: \"Any repairs in room ?\",\r\n                  trigger: \"todolist-add\"\r\n              }\r\n          ]\r\n      },\r\n      {\r\n            id: \"Food items\",\r\n            options: [{\r\n                    value: \"tiffin\",\r\n                    label: \"Tiffin\",\r\n                    trigger: \"Asking for tiffins\"\r\n                },\r\n                {\r\n                    value: \"lunch\",\r\n                    label: \"Lunch\",\r\n                    trigger: \"Asking for lunch\"\r\n                },\r\n                {\r\n                    value: \"snacks\",\r\n                    label: \"Snacks\",\r\n                    trigger: \"Asking for snacks\"\r\n                },\r\n                {\r\n                    value: \"dinner\",\r\n                    label: \"Dinner\",\r\n                    trigger: \"Asking for dinner\"\r\n                }\r\n            ]\r\n      },\r\n      {\r\n            id: \"Events-options\",\r\n            options:[\r\n                {\r\n                    value:\"this week\",\r\n                    label:\"This week\",\r\n                    trigger: \"Events this week\"\r\n                },\r\n                {\r\n                    value:\"next week\",\r\n                    label: \"Next week\",\r\n                    trigger:\"Events next week\"\r\n                }\r\n            ]\r\n      },\r\n      {\r\n          id:\"Events this week\",\r\n          message:\"There are no events this weeküòî\",\r\n          trigger:\"next\"\r\n      },\r\n      {\r\n          id: \"Events next week\",\r\n          message: \"Sankranthi celebrations üíÉ‚ú®\",\r\n          trigger:\"Anything else\"\r\n      },\r\n      {\r\n          id:\"next\",\r\n          message:\"Want to know for next week?\",\r\n          trigger: \"Ask\",\r\n      },\r\n      {\r\n          id:\"Ask\",\r\n          options:[\r\n              {\r\n                  value:\"yes\",\r\n                  label:\"Yeah!\",\r\n                  trigger: \"Events next week\"\r\n              },\r\n              {\r\n                  value:\"no\",\r\n                  label: \"No\",\r\n                  trigger:\"Anything else\"\r\n              }\r\n          ]\r\n      },\r\n      {\r\n            id: \"todolist-add\",\r\n            message:\"If you have any problems, kindly add them into the To-do list beside üòÑ\",\r\n            trigger:\"Anything else\"\r\n      },\r\n      {\r\n            id: \"Asking for tiffins\",\r\n            message: \"Idli, Dosa, Uthappam, Milkü•õ\",\r\n            trigger: \"Anything else\" \r\n      },\r\n      {\r\n          id: \"Asking for lunch\",\r\n          message: \"Paapad, Tomato Pappu, Bhindi fry, Rasam, Curd üòã\",\r\n          trigger: \"Anything else\"\r\n      },\r\n      {\r\n          id: \"Asking for snacks\",\r\n          message: \"Aloo Samosa, Nimbu waterüç∏\",\r\n          trigger: \"Anything else\"\r\n      },\r\n      {\r\n          id:\"Asking for dinner\",\r\n          message: \"Biryani, Chicken fry, Prawns curry, Gulaab Jamun, Ice-cream ü§§\",\r\n          trigger: \"Anything else\"\r\n      },\r\n      {\r\n        id: \"Anything else\",\r\n        options: [\r\n            {\r\n                value: \"yes\",\r\n                label:\"üîô\",\r\n                trigger: \"Displaying options\"\r\n            },\r\n            {\r\n                value:\"no\",\r\n                label: \"That's it, ThanksüôÇ\",\r\n                trigger: \"Bye\"\r\n            }\r\n        ]\r\n      },\r\n      {\r\n          id: \"Bye\",\r\n          message: \"Have a great day ü•∞\",\r\n          end: true\r\n      }\r\n\r\n    ];\r\n   \r\n   return(\r\n    <ThemeProvider theme={otherFontTheme}>\r\n        <ChatBot steps={steps} {...config} />\r\n    </ThemeProvider>\r\n   );\r\n  }\r\n  export default CustomChatbot;","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport CustomChatbot from \"./components/chatbot/CustomChatbot\";\n\nfunction Todo({ todo, index, completeTodo, removeTodo }) {\n  return (\n    <div\n      className=\"todo\"\n      style={\n        { \n          textDecoration: todo.isCompleted ? \"line-through\"  : \" \"\n      }\n    }\n    >\n      {todo.text}\n\n      <div>\n        <button className=\"b1\" onClick={() => completeTodo(index)}>Complete</button>\n        <button className=\"c\" onClick={() => removeTodo(index)}>X</button>\n      </div>\n    </div>\n  );\n}\n\nfunction TodoForm({ addTodo }) {\n  const [value, setValue] = useState(\"\");\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!value) return;\n    addTodo(value);\n    setValue(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        className=\"input\"\n        value={value}\n        onChange={e => setValue(e.target.value)}\n      />\n    </form>\n  );\n}\n\nfunction App() {\n  const [todos, setTodos] = useState([\n    {\n      text: \"Room No: 208 - Tubelight not working\",\n      isCompleted: false\n    },\n    {\n      text: \"Room No: 205 - Water leakage\",\n      isCompleted: false\n    },\n    {\n      text: \"Room No: 207 - Fan not working\",\n      isCompleted: false\n    }\n  ]);\n\n  const addTodo = text => {\n    const newTodos = [...todos, { text }];\n    setTodos(newTodos);\n  };\n\n  const completeTodo = index => {\n    const newTodos = [...todos];\n    if(newTodos[index].isCompleted !==true)\n        newTodos[index].isCompleted=true;\n    else\n      newTodos[index].isCompleted=false;\n    setTodos(newTodos);\n  };\n\n  const removeTodo = index => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    setTodos(newTodos);\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"todo-list\">\n        {todos.map((todo, index) => (\n          <Todo\n            key={index}\n            index={index}\n            todo={todo}\n            completeTodo={completeTodo}\n            removeTodo={removeTodo}\n          />\n        ))}\n        <TodoForm addTodo={addTodo} />\n        <CustomChatbot/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}